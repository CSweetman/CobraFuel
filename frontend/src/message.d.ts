/////////// NOTICE ///////////
// This file is autogenerated from Kotlin classes via the Gradle task generateTypescriptDefinitions.
// Please refer to and edit the original, io.github.JMoore34_CSweetman.SerializableClasses.

interface CardsPlayed {
    cardsPlayed: string[];
    playerID: number | undefined;
}

interface CoroutineContext {
}

interface CoroutineScope {
    coroutineContext: CoroutineContext;
}

interface AttributeKey<T> {
    name: string;
}

interface WebSocketExtensionFactory<ConfigType, ExtensionType extends WebSocketExtension<ConfigType>> {
    key: AttributeKey<ExtensionType>;
    rsv1: boolean;
    rsv2: boolean;
    rsv3: boolean;
}

interface WebSocketExtensionHeader {
    name: string;
    parameters: string[];
}

interface WebSocketExtension<ConfigType> {
    factory: WebSocketExtensionFactory<ConfigType, WebSocketExtension<ConfigType>>;
    protocols: WebSocketExtensionHeader[];
}

interface SelectClause1<Q> {
}

interface ChannelResult<T> {
    isClosed: boolean;
    isFailure: boolean;
    isSuccess: boolean;
}

interface ReceiveChannel<E> {
    isClosedForReceive: boolean;
    isEmpty: boolean;
    onReceive: SelectClause1<E>;
    onReceiveCatching: SelectClause1<ChannelResult<E>>;
    onReceiveOrNull: SelectClause1<E | undefined>;
}

interface Buffer {
}

interface ByteBuffer extends Buffer {
}

interface DisposableHandle {
}

type FrameType = "TEXT" | "BINARY" | "CLOSE" | "PING" | "PONG";

interface Frame {
    buffer: ByteBuffer;
    data: number[];
    disposableHandle: DisposableHandle;
    fin: boolean;
    frameType: FrameType;
    rsv1: boolean;
    rsv2: boolean;
    rsv3: boolean;
}

interface SelectClause2<P, Q> {
}

interface SendChannel<E> {
    isClosedForSend: boolean;
    onSend: SelectClause2<E, SendChannel<E>>;
}

interface WebSocketSession extends CoroutineScope {
    extensions: WebSocketExtension<any>[];
    incoming: ReceiveChannel<Frame>;
    masking: boolean;
    maxFrameSize: number;
    outgoing: SendChannel<Frame>;
}

interface Player {
    id: number;
    name: string;
    presentedHand: string[];
    rolesWon: string[];
    session: WebSocketSession | undefined;
}

interface SerializableRoomInfo {
    judgePlayerID: number;
    judgeRole: string;
    playerList: Player[];
}

interface CurrentState {
    playerID: number;
    roomData: SerializableRoomInfo;
}

interface EndOfRound {
    newCards: string[];
    roleCards: string[] | undefined;
    winnerPlayerID: number | undefined;
}

interface PlayerJoined {
    newPlayer: Player;
}

interface PlayerLeft {
    playerID: number;
}

interface SelectionOfRole {
    Role: string;
    judgeID: number | undefined;
}

interface Message {
    cardsPlayed: CardsPlayed | undefined;
    currentState: CurrentState | undefined;
    endOfRound: EndOfRound | undefined;
    playerJoined: PlayerJoined | undefined;
    playerLeft: PlayerLeft | undefined;
    selectionOfRole: SelectionOfRole | undefined;
}